syntax = "proto3";

package webalert.runner.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// The service that manages active runners (webworkers)
service Runner {
  // Creates a new runner.
  rpc Announce(AnnounceRequest) returns (google.protobuf.Empty);

  // Returns a list of all the runners known to the server.
  rpc List(ListRequest) returns (ListResponse);
}

// Details about a runner.
message RunnerInfo {
  // The human-readable name of the runner.
  string name = 1;
  // The hostname of the system the runner is running on.
  string hostname = 2;
  // The operating system of the system the runner is running on.
  string os = 3;
  // The architecture of the system the runner is running on.
  string arch = 4;
  // The first time the runner was registered on the server.
  google.protobuf.Timestamp create_time = 5;
  // The last time the runner was seen alive.
  google.protobuf.Timestamp update_time = 6;
}

// The request for [Runner.List].
message ListRequest {
  // If the list should include runners that are assumed dead.
  bool include_dead = 1;
}

// The response for [Runner.List].
message ListResponse {
  repeated RunnerInfo runners = 1;
}

message AnnounceRequest {
  // The hostname of the runner.
  string hostname = 1;
  // The operating system of the runner.
  string os = 2;
  // The system architecture of the runner.
  string arch = 3;
}
